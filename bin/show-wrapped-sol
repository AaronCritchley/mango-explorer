#!/usr/bin/env pyston3

import os
import sys

from pathlib import Path

# Get the full path to this script.
script_path = Path(os.path.realpath(__file__))

# The parent of the script is the bin directory.
# The parent of the bin directory is the notebook directory.
# It's this notebook directory we want.
notebook_directory = script_path.parent.parent

# Add the notebook directory to our import path.
sys.path.append(str(notebook_directory))

# Add the startup directory to our import path.
startup_directory = notebook_directory / "meta" / "startup"
sys.path.append(str(startup_directory))

import argparse
import logging
import projectsetup  # noqa: F401

from BaseModel import TokenAccount, TokenLookup
from Constants import WARNING_DISCLAIMER_TEXT
from Context import default_context as context
from Wallet import Wallet

parser = argparse.ArgumentParser(description="Shows all Wrapped SOL accounts for the wallet.")
parser.add_argument("--id-file", type=str, default="id.json",
                    help="file containing the JSON-formatted wallet private key")
parser.add_argument("--log-level", default=logging.WARNING, type=lambda level: getattr(logging, level),
                    help="level of verbosity to log (possible values: DEBUG, INFO, WARNING, ERROR, CRITICAL)")
parser.add_argument("--overwrite", action="store_true", default=False,
                    help="overwrite the ID file, if it exists (use with care!)")
args = parser.parse_args()

logging.getLogger().setLevel(args.log_level)
logging.warning(WARNING_DISCLAIMER_TEXT)

id_filename = args.id_file
if not os.path.isfile(id_filename):
    logging.error(f"Wallet file '{id_filename}' is not present.")
    sys.exit(1)
wallet = Wallet.load(id_filename)


lookups = TokenLookup.default_lookups()
wrapped_sol = lookups.find_by_symbol("SOL")

token_accounts = TokenAccount.fetch_all_for_owner_and_token(context, wallet.address, wrapped_sol)

if len(token_accounts) == 0:
    print("No wrapped SOL accounts")
else:
    print(f"{wrapped_sol.name}:")
    for account in token_accounts:
        print(f"    {account.address}: {account.amount:>18,.8f} {wrapped_sol.symbol}")

