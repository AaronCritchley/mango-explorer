#!/usr/bin/env pyston3

import argparse
import logging
import os
import sys
import typing

from decimal import Decimal
from solana.account import Account
from solana.transaction import Transaction

sys.path.insert(0, os.path.abspath(
    os.path.join(os.path.dirname(__file__), "..")))
import mango  # nopep8

parser = argparse.ArgumentParser(
    description="Wraps Pure SOL to Wrapped SOL and adds it to the first Wrapped SOL account, creating that account if it doesn't exist.")
mango.Context.add_command_line_parameters(parser)
mango.Wallet.add_command_line_parameters(parser)
parser.add_argument("--quantity", type=Decimal, required=True, help="quantity of SOL to wrap")
args = parser.parse_args()

logging.getLogger().setLevel(args.log_level)
logging.warning(mango.WARNING_DISCLAIMER_TEXT)

context = mango.Context.from_command_line_parameters(args)
wallet = mango.Wallet.from_command_line_parameters_or_raise(args)

wrapped_sol = context.token_lookup.find_by_symbol_or_raise("SOL")
amount_to_transfer = int(args.quantity * mango.SOL_DECIMAL_DIVISOR)

transaction = Transaction()
signers: typing.List[Account] = [wallet.account]
wrapped_sol_account = Account()
signers.append(wrapped_sol_account)

create_instruction = mango.CreateSplAccountInstructionBuilder(
    context, wallet, wrapped_sol_account.public_key(), amount_to_transfer)
transaction.add(create_instruction.build())
init_instruction = mango.InitializeSplAccountInstructionBuilder(
    context, wallet, wrapped_sol, wrapped_sol_account.public_key())
transaction.add(init_instruction.build())

token_accounts = mango.TokenAccount.fetch_all_for_owner_and_token(context, wallet.address, wrapped_sol)
print("Wrapping SOL:")
if len(token_accounts) == 0:
    print(f"    Source: {wallet.address}")
    print(f"    Destination: {wrapped_sol_account.public_key()}")
else:
    print(f"    Temporary account: {wrapped_sol_account.public_key()}")
    print(f"    Source: {wallet.address}")
    print(f"    Destination: {token_accounts[0].address}")
    wrap_instruction = mango.TransferSplTokensInstructionBuilder(
        context, wallet, wrapped_sol, wrapped_sol_account.public_key(), token_accounts[0].address, args.quantity)
    transaction.add(wrap_instruction.build())
    close_instruction = mango.CloseSplAccountInstructionBuilder(context, wallet, wrapped_sol_account.public_key())
    transaction.add(close_instruction.build())

response = context.client.send_transaction(transaction, *signers, opts=context.transaction_options)
transaction_id = context.unwrap_transaction_id_or_raise_exception(response)
print(f"Waiting on transaction ID: {transaction_id}")

context.wait_for_confirmation(transaction_id)
print("Transaction confirmed.")
