#!/usr/bin/env pyston3

import argparse
import logging
import os
import sys

from decimal import Decimal

sys.path.insert(0, os.path.abspath(
    os.path.join(os.path.dirname(__file__), "..")))
import mango  # nopep8

parser = argparse.ArgumentParser(
    description="Wraps Pure SOL to Wrapped SOL and adds it to the first Wrapped SOL account, creating that account if it doesn't exist.")
mango.Context.add_command_line_parameters(parser)
mango.Wallet.add_command_line_parameters(parser)
parser.add_argument("--quantity", type=Decimal, required=True, help="quantity of SOL to wrap")
args = parser.parse_args()

logging.getLogger().setLevel(args.log_level)
logging.warning(mango.WARNING_DISCLAIMER_TEXT)

context = mango.Context.from_command_line_parameters(args)
wallet = mango.Wallet.from_command_line_parameters_or_raise(args)

wrapped_sol = context.token_lookup.find_by_symbol_or_raise("SOL")
amount_to_transfer = int(args.quantity * mango.SOL_DECIMAL_DIVISOR)

signers: mango.CombinableInstructions = mango.CombinableInstructions.from_signers([wallet.account])

create_instructions = mango.build_create_spl_account_instructions(context, wallet, wrapped_sol, amount_to_transfer)
wrapped_sol_address = create_instructions.signers[0].public_key()
all_instructions = signers + create_instructions

token_accounts = mango.TokenAccount.fetch_all_for_owner_and_token(context, wallet.address, wrapped_sol)
print(token_accounts)
print("Wrapping SOL:")
if len(token_accounts) == 0:
    print(f"    Source: {wallet.address}")
    print(f"    Destination: {wrapped_sol_address}")
else:
    print(f"    Temporary account: {wrapped_sol_address}")
    print(f"    Source: {wallet.address}")
    print(f"    Destination: {token_accounts[0].address}")
    wrap_instruction = mango.build_transfer_spl_tokens_instructions(
        context, wallet, wrapped_sol, wrapped_sol_address, token_accounts[0].address, args.quantity)
    close_instruction = mango.build_close_spl_account_instructions(context, wallet, wrapped_sol_address)
    all_instructions = all_instructions + wrap_instruction + close_instruction

transaction_id = all_instructions.execute_and_unwrap_transaction_ids(context)[0]
print(f"Waiting on transaction ID: {transaction_id}")

context.wait_for_confirmation(transaction_id)
print("Transaction confirmed.")
