#!/usr/bin/env pyston3

import argparse
import logging
import os
import sys

from decimal import Decimal
from solana.account import Account
from solana.transaction import Transaction

sys.path.insert(0, os.path.abspath(
    os.path.join(os.path.dirname(__file__), "..")))
import mango  # nopep8

parser = argparse.ArgumentParser(description="Unwraps Wrapped SOL to Pure SOL and adds it to the wallet account.")
mango.Context.add_command_line_parameters(parser)
mango.Wallet.add_command_line_parameters(parser)
parser.add_argument("--quantity", type=Decimal, required=True, help="quantity of SOL to unwrap")
args = parser.parse_args()

logging.getLogger().setLevel(args.log_level)
logging.warning(mango.WARNING_DISCLAIMER_TEXT)

context = mango.Context.from_command_line_parameters(args)
wallet = mango.Wallet.from_command_line_parameters_or_raise(args)

wrapped_sol = context.token_lookup.find_by_symbol_or_raise("SOL")

largest_token_account = mango.TokenAccount.fetch_largest_for_owner_and_token(
    context, wallet.address, wrapped_sol)
if largest_token_account is None:
    raise Exception(f"No {wrapped_sol.name} accounts found for owner {wallet.address}.")

transaction = Transaction()
wrapped_sol_account = Account()
signers = mango.InstructionData.from_signers([wallet.account, wrapped_sol_account])
create_instructions = mango.build_create_spl_account_instructions(
    context, wallet, wrapped_sol, wrapped_sol_account.public_key())
unwrap_instructions = mango.build_transfer_spl_tokens_instructions(
    context, wallet, wrapped_sol, largest_token_account.address, wrapped_sol_account.public_key(), args.quantity)
close_instructions = mango.build_close_spl_account_instructions(context, wallet, wrapped_sol_account.public_key())

all_instructions = signers + create_instructions + unwrap_instructions + close_instructions

print("Unwrapping SOL:")
print(f"    Temporary account: {wrapped_sol_account.public_key()}")
print(f"    Source: {largest_token_account.address}")
print(f"    Destination: {wallet.address}")

transaction_id = all_instructions.execute_and_unwrap_transaction_id(context)
print(f"Waiting on transaction ID: {transaction_id}")

context.wait_for_confirmation(transaction_id)
print("Transaction confirmed.")
