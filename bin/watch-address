#!/usr/bin/env pyston3

import argparse
import logging
import os
import os.path
import rx
import rx.operators
import sys
import threading
import typing

from decimal import Decimal
from solana.publickey import PublicKey

sys.path.insert(0, os.path.abspath(
    os.path.join(os.path.dirname(__file__), "..")))
import mango  # nopep8
import mango.layouts  # nopep8
import mango.marketmaking.fixedratiosdesiredordersbuilder  # nopep8
import mango.marketmaking.marketmaker  # nopep8
import mango.marketmaking.modelstate  # nopep8
import mango.marketmaking.toleranceorderreconciler  # nopep8

parser = argparse.ArgumentParser(description="Shows the on-chain data of a particular account.")
mango.ContextBuilder.add_command_line_parameters(parser)
mango.Wallet.add_command_line_parameters(parser)
parser.add_argument("--address", type=PublicKey, required=True, help="Address of the Solana account to watch")
parser.add_argument("--account-type", type=str, required=True,
                    help="Underlying object type of the data in the AccountInfo")
args = parser.parse_args()

logging.getLogger().setLevel(args.log_level)
logging.warning(mango.WARNING_DISCLAIMER_TEXT)

context = mango.ContextBuilder.from_command_line_parameters(args)

disposer = mango.DisposePropagator()
manager = mango.WebSocketSubscriptionManager()
disposer.add_disposable(manager)

if args.account_type.upper() == "ACCOUNTINFO":
    raw_subscription = mango.WebSocketSubscription(
        context, args.address, lambda account_info: account_info)
    manager.add(raw_subscription)
    publisher: rx.Observable = raw_subscription.publisher
elif args.account_type.upper() == "PERPEVENTS":
    class EventSplitter:
        def __init__(self):
            self.seq_num = Decimal(0)

        def split(self, item: mango.PerpEventQueue) -> typing.Sequence[typing.Optional[mango.PerpEvent]]:
            events = item.events[int(self.seq_num):int(item.sequence_number)]
            self.seq_num = item.sequence_number
            return events

    splitter: EventSplitter = EventSplitter()

    def _split_events(account_info: mango.AccountInfo) -> typing.Sequence[typing.Optional[mango.PerpEvent]]:
        perp_event_queue = mango.PerpEventQueue.parse(account_info)
        return splitter.split(perp_event_queue)

    converter: typing.Callable[[mango.AccountInfo], typing.Any] = _split_events
    event_splitting_subscription = mango.WebSocketSubscription(
        context, args.address, lambda acc: acc)
    manager.add(event_splitting_subscription)
    publisher = event_splitting_subscription.publisher.pipe(rx.operators.flat_map(_split_events))
else:
    converter = mango.build_account_info_converter(context, args.account_type)
    converting_subscription = mango.WebSocketSubscription(
        context, args.address, converter)
    manager.add(converting_subscription)
    publisher = converting_subscription.publisher

publisher.subscribe(mango.PrintingObserverSubscriber(False))

websocket_url = context.cluster_url.replace("https", "ws", 1)
ws: mango.ReconnectingWebsocket = mango.ReconnectingWebsocket(websocket_url, manager.open_handler, manager.on_item)
ws.ping_interval = 10
ws.open()

# Wait - don't exit. Exiting will be handled by signals/interrupts.
waiter = threading.Event()
try:
    waiter.wait()
except:
    pass

logging.info("Shutting down...")
ws.close()
disposer.dispose()
logging.info("Shutdown complete.")
