#!/usr/bin/env pyston3

import argparse
import logging
import os
import os.path
import sys
import traceback

from decimal import Decimal
from solana.publickey import PublicKey


sys.path.insert(0, os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..')))
import mango  # nopep8

# We explicitly want argument parsing to be outside the main try-except block because some arguments
# (like --help) will cause an exit, which our except: block traps.
parser = argparse.ArgumentParser(description="Fetch Mango Markets objects and show their contents.")
parser.add_argument("--cluster", type=str, default=mango.default_cluster,
                    help="Solana RPC cluster name")
parser.add_argument("--cluster-url", type=str, default=mango.default_cluster_url,
                    help="Solana RPC cluster URL")
parser.add_argument("--program-id", type=str, default=mango.default_program_id,
                    help="Mango program ID/address")
parser.add_argument("--dex-program-id", type=str, default=mango.default_dex_program_id,
                    help="DEX program ID/address")
parser.add_argument("--group-name", type=str, default=mango.default_group_name,
                    help="Mango group name")
parser.add_argument("--group-id", type=str, default=mango.default_group_id,
                    help="Mango group ID/address")
parser.add_argument("--id-file", type=str, default="id.json",
                    help="file containing the JSON-formatted wallet private key")
parser.add_argument("--log-level", default=logging.WARNING, type=lambda level: getattr(logging, level),
                    help="level of verbosity to log (possible values: DEBUG, INFO, WARNING, ERROR, CRITICAL)")
parser.add_argument("--type", type=str, required=True,
                    help="type of object to be fetched (can be OPEN-ORDERS or MARGIN-ACCOUNT)")
parser.add_argument("--address", type=PublicKey,
                    help="Solana address of the Mango Markets object to be fetched")
args = parser.parse_args()

logging.getLogger().setLevel(args.log_level)
logging.warning(mango.WARNING_DISCLAIMER_TEXT)

try:
    context = mango.Context.from_command_line(args.cluster, args.cluster_url, args.program_id,
                                              args.dex_program_id, args.group_name, args.group_id)

    address = args.address
    object_type = args.type.upper()

    if object_type == "OPEN-ORDERS":
        open_orders = mango.OpenOrders.load(context, address, Decimal(6), Decimal(6))
        print(open_orders)
    elif object_type == "MARGIN-ACCOUNT":
        margin_account = mango.MarginAccount.load(context, address)
        print(margin_account)
    elif object_type == "ALL-MARGIN-ACCOUNTS":
        margin_accounts = mango.MarginAccount.load_all_for_owner(context, address)
        print(margin_accounts)
    else:
        print(f"Unknown type: {object_type}")
except Exception as exception:
    logging.critical(f"mango-fetch stopped because of exception: {exception} - {traceback.format_exc()}")
except:
    logging.critical(f"mango-fetch stopped because of uncatchable error: {traceback.format_exc()}")
