#!/usr/bin/env pyston3

import argparse
import json
import logging
import os
import os.path
import sys
import traceback

from decimal import Decimal

sys.path.insert(0, os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..')))
import mango  # nopep8

# We explicitly want argument parsing to be outside the main try-except block because some arguments
# (like --help) will cause an exit, which our except: block traps.
parser = argparse.ArgumentParser(description="Settles all openorders transactions in the Group.")
parser.add_argument("--cluster", type=str, default=mango.default_cluster,
                    help="Solana RPC cluster name")
parser.add_argument("--cluster-url", type=str, default=mango.default_cluster_url,
                    help="Solana RPC cluster URL")
parser.add_argument("--program-id", type=str, default=mango.default_program_id,
                    help="Mango program ID/address")
parser.add_argument("--dex-program-id", type=str, default=mango.default_dex_program_id,
                    help="DEX program ID/address")
parser.add_argument("--group-name", type=str, default=mango.default_group_name,
                    help="Mango group name")
parser.add_argument("--group-id", type=str, default=mango.default_group_id,
                    help="Mango group ID/address")
parser.add_argument("--id-file", type=str, default="id.json",
                    help="file containing the JSON-formatted wallet private key")
parser.add_argument("--token-data-file", type=str, default="solana.tokenlist.json",
                    help="data file that contains token symbols, names, mints and decimals (format is same as https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json)")
parser.add_argument("--log-level", default=logging.WARNING, type=lambda level: getattr(logging, level),
                    help="level of verbosity to log (possible values: DEBUG, INFO, WARNING, ERROR, CRITICAL)")
parser.add_argument("--dry-run", action="store_true", default=False,
                    help="runs as read-only and does not perform any transactions")
args = parser.parse_args()

logging.getLogger().setLevel(args.log_level)
logging.warning(mango.WARNING_DISCLAIMER_TEXT)

try:
    id_filename = args.id_file
    if not os.path.isfile(id_filename):
        logging.error(f"Wallet file '{id_filename}' is not present.")
        sys.exit(1)
    wallet = mango.Wallet.load(id_filename)

    context = mango.Context.from_command_line(args.cluster, args.cluster_url, args.program_id,
                                              args.dex_program_id, args.group_name, args.group_id)

    logging.info(f"Context: {context}")
    logging.info(f"Wallet address: {wallet.address}")

    group = mango.Group.load(context)

    with open(args.token_data_file) as json_file:
        token_data = json.load(json_file)
        spot_market_lookup = mango.SpotMarketLookup(token_data)

    if args.dry_run:
        trade_executor: mango.TradeExecutor = mango.NullTradeExecutor(print)
    else:
        trade_executor = mango.SerumImmediateTradeExecutor(context, wallet, spot_market_lookup, Decimal(0), print)

    for market_metadata in group.markets:
        market = market_metadata.fetch_market(context)
        spot_market = spot_market_lookup.find_by_symbol(market_metadata.symbol)
        if spot_market is None:
            logging.warn(
                f"Skipping settling for market {market_metadata.symbol} because no spot market could be found.")
        else:
            transaction_ids = trade_executor.settle(spot_market, market)
            trade_executor.wait_for_settlement_completion(transaction_ids)

    logging.info("Settlement completed.")
except Exception as exception:
    logging.critical(f"group-settle stopped because of exception: {exception} - {traceback.format_exc()}")
except:
    logging.critical(f"group-settle stopped because of uncatchable error: {traceback.format_exc()}")
