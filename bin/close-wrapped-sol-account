#!/usr/bin/env pyston3

import argparse
import logging
import os
import sys
import typing

from solana.account import Account
from solana.publickey import PublicKey
from spl.token.constants import TOKEN_PROGRAM_ID
from solana.transaction import Transaction
from spl.token.instructions import CloseAccountParams, close_account

sys.path.insert(0, os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..')))
import mango  # nopep8

parser = argparse.ArgumentParser(description="Closes a Wrapped SOL account.")
parser.add_argument("--id-file", type=str, default="id.json",
                    help="file containing the JSON-formatted wallet private key")
parser.add_argument("--address", type=PublicKey,
                    help="Public key of the Wrapped SOL account to close")
parser.add_argument("--log-level", default=logging.WARNING, type=lambda level: getattr(logging, level),
                    help="level of verbosity to log (possible values: DEBUG, INFO, WARNING, ERROR, CRITICAL)")
parser.add_argument("--overwrite", action="store_true", default=False,
                    help="overwrite the ID file, if it exists (use with care!)")
args = parser.parse_args()

logging.getLogger().setLevel(args.log_level)
logging.warning(mango.WARNING_DISCLAIMER_TEXT)

id_filename = args.id_file
if not os.path.isfile(id_filename):
    logging.error(f"Wallet file '{id_filename}' is not present.")
    sys.exit(1)
wallet = mango.Wallet.load(id_filename)

lookups = mango.TokenLookup.default_lookups()
wrapped_sol = lookups.find_by_symbol("SOL")

token_account = mango.TokenAccount.load(mango.default_context, args.address)
if (token_account is None) or (token_account.mint != wrapped_sol.mint):
    raise Exception(f"Account {args.address} is not a {wrapped_sol.name} account.")

transaction = Transaction()
signers: typing.List[Account] = [wallet.account]
payer = wallet.address

transaction.add(
    close_account(
        CloseAccountParams(
            account=args.address,
            owner=wallet.address,
            dest=wallet.address,
            program_id=TOKEN_PROGRAM_ID,
        )
    )
)

print(f"Closing account: {args.address} with balance {token_account.amount} lamports.")

response = mango.default_context.client.send_transaction(transaction, *signers)
transaction_id = mango.default_context.unwrap_transaction_id_or_raise_exception(response)
print(f"Waiting on transaction ID: {transaction_id}")

mango.default_context.wait_for_confirmation(transaction_id)
print("Done.")
