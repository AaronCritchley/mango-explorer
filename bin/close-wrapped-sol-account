#!/usr/bin/env pyston3

import argparse
import logging
import os
import sys
import typing

from solana.publickey import PublicKey
from solana.transaction import Transaction

sys.path.insert(0, os.path.abspath(
    os.path.join(os.path.dirname(__file__), "..")))
import mango  # nopep8

parser = argparse.ArgumentParser(description="Closes a Wrapped SOL account.")
mango.Context.add_command_line_parameters(parser)
mango.Wallet.add_command_line_parameters(parser)
parser.add_argument("--address", type=PublicKey,
                    help="Public key of the Wrapped SOL account to close")
args = parser.parse_args()

logging.getLogger().setLevel(args.log_level)
logging.warning(mango.WARNING_DISCLAIMER_TEXT)

context = mango.Context.from_command_line_parameters(args)
wallet = mango.Wallet.from_command_line_parameters_or_raise(args)

wrapped_sol = context.token_lookup.find_by_symbol_or_raise("SOL")

token_account: typing.Optional[mango.TokenAccount] = mango.TokenAccount.load(context, args.address)
if (token_account is None) or (token_account.value.token.mint != wrapped_sol.mint):
    raise Exception(f"Account {args.address} is not a {wrapped_sol.name} account.")

transaction = Transaction()
payer = wallet.address
signers = mango.InstructionData.from_wallet(wallet)

close_instruction = mango.build_close_spl_account_instructions(context, wallet, args.address)

print(f"Closing account: {args.address} with balance {token_account.value.value} lamports.")

all_instructions = signers + close_instruction
transaction_id = all_instructions.execute_and_unwrap_transaction_id(context)
print(f"Waiting on transaction ID: {transaction_id}")

context.wait_for_confirmation(transaction_id)
print("Account closed.")
