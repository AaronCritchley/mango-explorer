#!/usr/bin/env pyston3

import argparse
import logging
import os
import os.path
import sys

sys.path.insert(0, os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..')))
import mango  # nopep8

parser = argparse.ArgumentParser(description="Displays the price from the Pyth Network.")
mango.Context.add_context_command_line_parameters(parser)
parser.add_argument("--provider", type=str, required=True,
                    help="name of the price provider to use (e.g. pyth)")
parser.add_argument("--symbol", type=str, required=True,
                    help="market symbol to display (e.g. ETH/USDC)")
parser.add_argument("--stream", action="store_true", default=False,
                    help="stream the prices until stopped")
parser.add_argument("--token-data-file", type=str, default="solana.tokenlist.json",
                    help="data file that contains token symbols, names, mints and decimals (format is same as https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json)")
parser.add_argument("--log-level", default=logging.INFO, type=lambda level: getattr(logging, level),
                    help="level of verbosity to log (possible values: DEBUG, INFO, WARNING, ERROR, CRITICAL)")
args = parser.parse_args()

logging.getLogger().setLevel(args.log_level)
logging.warning(mango.WARNING_DISCLAIMER_TEXT)

context = mango.Context.from_context_command_line_parameters(args)

logging.info(str(context))

lookup: mango.SpotMarketLookup = mango.SpotMarketLookup.load(args.token_data_file)
oracle_provider: mango.OracleProvider = mango.create_oracle_provider(args.provider, lookup)

market = lookup.find_by_symbol(args.symbol)
if market is None:
    raise Exception(f"Could not find market {args.symbol}.")

oracle = oracle_provider.oracle_for_market(context, market)
if oracle is None:
    print(f"Could not find oracle for market {market.symbol} from provider {args.provider}.")
else:
    if not args.stream:
        price = oracle.fetch_price(context)
        print(f"The price of '{oracle.symbol}' on {price.source.provider_name} is: '{price.mid_price:,.8f}'")
    else:
        print("Press <ENTER> to quit.")
        price_subscription = oracle.to_streaming_observable(context)
        disposable = price_subscription.subscribe(mango.PrintingObserverSubscriber(False))

        # Wait - don't exit
        input()
        disposable.dispose()
