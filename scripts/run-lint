#!/usr/bin/env python3

import argparse
import nbformat
import os
import re
import sys

from mypy import api
from nbconvert.exporters import PythonExporter
from pathlib import Path
from os.path import isfile, join

#Â Get the full path to this script.
script_path = Path(os.path.realpath(__file__))

# The parent of the script is the bin directory, the parent of that is the
# notebook directory. It's this notebook directory we want.
notebook_directory = script_path.parent.parent

parser = argparse.ArgumentParser(description='Run MyPy for static checks.')
parser.add_argument('--filename',
                    metavar='FILENAME',
                    help="(optional) name of file to be checked")

args = parser.parse_args()
all_notebook_files = []
if args.filename:
    all_notebook_files = [args.filename]
    all_command_files = []
else:
    # But we want to lint every notebook just to make sure the code in it is OK.
    all_notebook_files = [f for f in os.listdir(notebook_directory) if isfile(
        notebook_directory / f) and f.endswith(".ipynb")]

    all_notebook_files.sort()

    all_command_files = [f for f in os.listdir(notebook_directory / "bin") if isfile(notebook_directory / "bin" / f)]


line_pattern = re.compile('(<[a-z]+>:)\s*(\d+)\s*:\s*(.*?)\s*:\s*(.*?)$')
def print_pattern_result(message: str):
    pattern_result = line_pattern.findall(message)
    if pattern_result:
        _, line_number, category, text = pattern_result[0]
        print(f"[{category}] line {line_number}: {text}")
    elif message:
        print(message)

def run_mypy_on_contents(module_name, contents: str):
    warnings, errors, exit_code = api.run(['--ignore-missing-imports', '-c', contents])
    if exit_code != 0:
        print(f"MyPy exited with code {exit_code} on {module_name}")
        if warnings:
            print("MyPy Warnings:")
            for warning in warnings.split("\n"):
                print_pattern_result(warning)
        if errors:
            print("MyPy Errors:")
            for error in errors.split("\n"):
                print_pattern_result(error)

try:
    # Now lint each notebook in turn.
    for notebook_name in all_notebook_files:
        print(f"Linting {notebook_name}...", flush=True)
        command = f'nblint --linter pyflakes {notebook_name} | grep -v -E "Code Cell [0-9]+ that starts with" | grep -v "may be undefined" | grep -v "projectsetup" | grep -v "unable to detect undefined names" | sed "/^[[:space:]]*$/d"'
        os.system(command)

        with open(notebook_name, 'r') as notebook_file:
            body = notebook_file.read()
            notebook = nbformat.reads(body, as_version=4)
            python_exporter = PythonExporter()
            (body, resources) = python_exporter.from_notebook_node(notebook)

        run_mypy_on_contents(notebook_name, body)

    for command_file in all_command_files:
        print(f"Linting {command_file}...", flush=True)
        command = f'pyflakes bin/{command_file} | grep -v "\'projectsetup\' imported but unused"'
        os.system(command)

        with open(str(notebook_directory / "bin" / command_file), 'r') as script:
            body = script.read()

        run_mypy_on_contents(command_file, body)

except Exception as ex:
    print(f"Caught exception: {ex}")

tmpfile = notebook_directory / "tmp.py"
if os.path.exists(tmpfile):
    os.unlink(tmpfile)
