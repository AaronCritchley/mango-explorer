#!/usr/bin/env python3

import argparse
import nbformat
import os
import re
import shutil
import sys

from mypy import api
from nbconvert.exporters import PythonExporter
from pathlib import Path
from os.path import isfile, join

#Â Get the full path to this script.
script_path = Path(os.path.realpath(__file__))

# The parent of the script is the bin directory, the parent of that is the
# notebook directory. It's this notebook directory we want.
notebook_directory = script_path.parent.parent

parser = argparse.ArgumentParser(description="Run a liquidator for a Mango Markets group.")
parser.add_argument("--skip-cleanup", action="store_true", default=False,
                    help="skip removal of the temp directory when finished (will leave processed files for inspection)")
args = parser.parse_args()

working_directory_name = ".tmplintdir"
try:
    if os.path.exists(notebook_directory / working_directory_name):
        shutil.rmtree(notebook_directory / working_directory_name)

    os.mkdir(str(notebook_directory / working_directory_name))

    all_notebook_files = [f for f in os.listdir(notebook_directory) if isfile(
        notebook_directory / f) and f.endswith(".ipynb")]
    for notebook_name in all_notebook_files:
        with open(notebook_name, 'r') as notebook_file:
            notebook_body = notebook_file.read()
            notebook = nbformat.reads(notebook_body, as_version=4)
            python_exporter = PythonExporter()
            body, _ = python_exporter.from_notebook_node(notebook)
        notebook_base_name, _ = os.path.splitext(notebook_name)
        notebook_python_file = notebook_base_name + ".py"
        with open(str(notebook_directory / working_directory_name / notebook_python_file), 'w') as pyfile:
            pyfile.write(body)

    all_command_files = [f for f in os.listdir(notebook_directory / "bin") if isfile(
        notebook_directory / "bin" / f)]
    for command_name in all_command_files:
        source = notebook_directory / "bin" / command_name
        command_python_file = command_name + ".py"
        destination = notebook_directory / working_directory_name / command_python_file
        shutil.copy(source, destination)

    all_startup_files = [f for f in os.listdir(notebook_directory / "meta" / "startup") if isfile(
        notebook_directory / "meta" / "startup" / f)]
    for startup_file in all_startup_files:
        source = notebook_directory / "meta" / "startup" / startup_file
        destination = notebook_directory / working_directory_name / startup_file
        shutil.copy(source, destination)

    command = f'flake8 --extend-ignore E402,E501,E722,W291,W391 "{str(notebook_directory / working_directory_name)}"'
    os.system(command)

    command = f'mypy "{str(notebook_directory / working_directory_name)}"'
    os.system(command)

except Exception as ex:
    print(f"Caught exception: {ex}")

if not args.skip_cleanup:
    if os.path.exists(notebook_directory / working_directory_name):
        shutil.rmtree(notebook_directory / working_directory_name)
